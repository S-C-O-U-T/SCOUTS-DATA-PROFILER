/*
Copyright 2020 SCOUT
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
----------------------------------------------
DECLARE @DATABASE AS NVARCHAR(255) = 'WideWorldImportersDW-Standard'
DECLARE @SCHEMA AS NVARCHAR(255) = 'Fact'
DECLARE @TABLE AS NVARCHAR(255) = 'Order'
----------------------------------------------

---------------Templates----------------------
DECLARE @MAX AS NVARCHAR(255) = 'SELECT MAX(<C>) AS [Max] FROM <T>'
DECLARE @MIN AS NVARCHAR(255) = 'SELECT MIN(<C>) AS [Min] FROM <T>'
DECLARE @AVG AS NVARCHAR(255) = 'SELECT CAST(AVG(<C>) AS FLOAT) AS [Avg] FROM <T>'
DECLARE @NULLS AS NVARCHAR(255) = 'SELECT COUNT(*) [NULL] FROM <T> WHERE <C> IS NULL'
DECLARE @BLANKS AS NVARCHAR(255) = 'SELECT COUNT(*) [Blanks] FROM <T> WHERE <C> = '''''
DECLARE @DISTINCT_VALUES AS NVARCHAR(255) = 'SELECT COUNT(DISTINCT <C>) [DistinctCount] FROM <T> WHERE <C> IS NOT NULL'
DECLARE @TOP_N_DISTINCT_VALUES AS NVARCHAR(1024) =
	'SELECT TRIM(STRING_AGG(DISTINCT_LIST, '', '')) [Top 10 values] FROM
	(SELECT DISTINCT TOP 10 CONCAT_WS('' ('', <C>, COUNT(<C>)) + '')'' AS DISTINCT_LIST, COUNT(<C>) AS _
		FROM <T>
		WHERE <C> IS NOT NULL
		GROUP BY <C>
		ORDER BY COUNT(<C>) DESC
	) LIST'

DECLARE @TEMPLATES TABLE ([NAME] NVARCHAR(32), TEMPLATE NVARCHAR(1024))
INSERT INTO @TEMPLATES SELECT 'MAX', @MAX
INSERT INTO @TEMPLATES SELECT 'MIN', @MIN
INSERT INTO @TEMPLATES SELECT 'AVG', @AVG
INSERT INTO @TEMPLATES SELECT 'NULLS', @NULLS
INSERT INTO @TEMPLATES SELECT 'BLANKS', @BLANKS
INSERT INTO @TEMPLATES SELECT 'DISTINCT_VALUES', @DISTINCT_VALUES
INSERT INTO @TEMPLATES SELECT 'TOP_N_DISTINCT_VALUES', @TOP_N_DISTINCT_VALUES

DECLARE @TARGET_OBJECTS TABLE (ID INT, TABLE_FULL_NAME NVARCHAR(128), COLUMN_FULL_NAME NVARCHAR(128));

DROP TABLE IF EXISTS #OBJECT_META_DATA
SELECT 
	ROW_NUMBER() OVER (ORDER BY TABLE_CATALOG) ID,
	TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, DATETIME_PRECISION
	INTO #OBJECT_META_DATA
	FROM 
	INFORMATION_SCHEMA.COLUMNS

INSERT INTO @TARGET_OBJECTS
SELECT
	ID,
	CONCAT_WS('.', QUOTENAME(TABLE_CATALOG), QUOTENAME(TABLE_SCHEMA), QUOTENAME(TABLE_NAME)) AS TABLE_FULL_NAME,
	CONCAT_WS('.', QUOTENAME(TABLE_CATALOG), QUOTENAME(TABLE_SCHEMA), QUOTENAME(TABLE_NAME), QUOTENAME(COLUMN_NAME)) AS COLUMN_FULL_NAME
	FROM #OBJECT_META_DATA 
	WHERE TABLE_CATALOG = @DATABASE AND TABLE_SCHEMA = @SCHEMA AND TABLE_NAME = @TABLE

DROP TABLE IF EXISTS #PROFILE_STATEMENTS
SELECT 
	ROW_NUMBER() OVER (ORDER BY TargetObj.ID) Row_Num,
	TargetObj.ID, Templates.NAME AS ProfileName, ObjMetaData.DATA_TYPE, ObjMetaData.TABLE_NAME, ObjMetaData.TABLE_SCHEMA, ObjMetaData.COLUMN_NAME,
	REPLACE(REPLACE(Templates.TEMPLATE, '<T>', TargetObj.TABLE_FULL_NAME), '<C>', TargetObj.COLUMN_FULL_NAME) AS D_SQL
	INTO #PROFILE_STATEMENTS
	FROM @TARGET_OBJECTS TargetObj
	LEFT JOIN #OBJECT_META_DATA ObjMetaData ON TargetObj.ID = ObjMetaData.ID
	CROSS JOIN @TEMPLATES Templates

---------------Start Profiling----------------------
DROP TABLE IF EXISTS #PROFILE
CREATE TABLE #PROFILE 
	(ID INT
	,TableName NVARCHAR(255)
	,SchemaName NVARCHAR(255)
	,ColumnName NVARCHAR(255)
	,DataType NVARCHAR(32)
	,ProfileName NVARCHAR(32)
	,Result NVARCHAR(4000))

DECLARE @D_SQL AS NVARCHAR(2048)
DECLARE @RESULT AS NVARCHAR(MAX)

DECLARE @NEXT AS INT
DECLARE @END AS INT

SET @NEXT = (SELECT MIN(Row_Num) FROM #PROFILE_STATEMENTS)
SET @END = (SELECT MAX(Row_Num) FROM #PROFILE_STATEMENTS)

WHILE @NEXT <= @END
BEGIN
	
	SET @D_SQL = (SELECT D_SQL FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT)

	INSERT INTO #PROFILE
		(ID, TableName,	SchemaName,	ColumnName,	DataType, ProfileName, Result)
		VALUES
		(
			(SELECT ID FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			(SELECT TABLE_NAME FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			(SELECT TABLE_SCHEMA FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			(SELECT COLUMN_NAME FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			(SELECT DATA_TYPE FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			(SELECT ProfileName FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT),
			NULL
		)
	
	SET @D_SQL =
		'UPDATE #PROFILE
			SET Result = ( ' + @D_SQL + ' )
			WHERE 
				ID = (SELECT ID FROM #PROFILE_STATEMENTS 
				WHERE Row_Num = ' + CONVERT(NVARCHAR, @NEXT) + ')
			AND ProfileName = (SELECT ProfileName FROM #PROFILE_STATEMENTS
				WHERE Row_Num = ' + CONVERT(NVARCHAR, @NEXT) + ')'
	
	BEGIN TRY
		EXEC(@D_SQL)
	END TRY
	BEGIN CATCH
		UPDATE #PROFILE SET Result = N'N/A' 
			WHERE ID = (SELECT ID FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT) 
			AND ProfileName = (SELECT ProfileName FROM #PROFILE_STATEMENTS WHERE Row_Num = @NEXT)
	END CATCH
	SET @NEXT = (SELECT MIN(Row_Num) FROM #PROFILE_STATEMENTS WHERE Row_Num > @NEXT)
END

----------------------------------------------
---------------Result-------------------------
DECLARE @COLUMNS AS NVARCHAR(4000) = ''
SELECT @COLUMNS += QUOTENAME(ProfileName) + ',' FROM (SELECT DISTINCT ProfileName FROM #PROFILE) DistinctProfileName

SET @COLUMNS = LEFT(@COLUMNS, LEN(@COLUMNS) -1)

DECLARE @PVT_SQL AS NVARCHAR(4000) =
'SELECT * FROM
(
	SELECT [ID], [TableName], [SchemaName], [ColumnName], [DataType], [ProfileName], [Result] FROM #PROFILE
) AS [Profile]
PIVOT(
	MAX(Result)
	FOR ProfileName IN ( ' + @COLUMNS + ' )) AS Pvt
'
EXEC(@PVT_SQL)